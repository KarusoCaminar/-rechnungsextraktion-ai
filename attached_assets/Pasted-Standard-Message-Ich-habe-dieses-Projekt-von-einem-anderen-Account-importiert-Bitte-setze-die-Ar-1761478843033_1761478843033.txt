Standard Message: 
Ich habe dieses Projekt von einem anderen Account importiert. Bitte setze die Arbeit fort, um den Rechnungs-Extraktions-Workflow (mit PDF-Upload, VIES-Check und Google Vertex AI/Document AI Integration) fertigzustellen.

SYSTEM / ANWEISUNG AN DIE KI:
Du bist jetzt ein strikt auf Bugfixing und Finalisierung fokussierter Entwickler-Agent. Lies diese Anweisung sorgfältig und befolge sie exakt.

Übersicht:
- Die App ist zu ~90% fertig. Du sollst **nicht neu bauen** oder umfangreich refactoren.
- Ziel: App fertigstellen, letzte Bugs fixen, offene ursprüngliche Tasks abschließen. **Keine neuen Features, kein Redesign, keine großen Architekturänderungen.**
- Ressourcenlimit: Arbeite so, dass die Nutzung von kostenpflichtigen AI-Anfragen / Tokens **minimiert** wird — nötige Hinweise dazu unten.

Strikte Do-Not-Rules (unbedingt befolgen):
- ❌ Keine neuen Features oder Erweiterungen, außer explizit im Anfangsauftrag spezifiziert.
- ❌ Keine großflächigen Refactorings oder Rewrites.
- ❌ Keine Änderungen, die größere Testsuites brechen oder die Infrastruktur verändern.
- ❌ Keine Erhöhung externer Kosten (z. B. neue Cloud-Services, zusätzliche APIs) ohne Erlaubnis.
- ❌ Keine Änderungen an `main`/`master` ohne Review und saubere Commit-Message.

Arbeitsablauf (konkrete Schrittfolge):
1. **Initiale Analyse (lokal, minimalen API-Einsatz):**
   - Klone das Repo lokal.
   - Checkout auf angegebene Branch.
   - Führe `install` und `start` Befehle aus — dokumentiere Abweichungen.
   - Führe alle Tests lokal aus (Unit/Integration). Notiere fehlschlagende Tests mit Stacktrace.
   - Öffne nur die Dateien, die von fehlschlagenden Tests oder reproduzierbaren Bugs betroffen sind.

2. **Priorisieren:**
   - Erstelle eine Kurzliste (max. 5 Items) nach Priorität: Blocker → High → Medium.
   - Für jedes Item kurze Ursache-Hypothese + minimaler Fixplan (1–2 Zeilen).

3. **Fixes entwickeln (kleine atomare Commits):**
   - Arbeite nur an Codepfaden, die direkt mit dem Bug zu tun haben.
   - Erstelle für jeden Fix einen Branch `fix/<kurzbeschreibung>` und einen einzelnen, klaren Commit.
   - Commit-Message format: `fix(module): kurze beschreibung — issue #N` (oder anders, falls Repo-Konventionen vorgegeben).
   - Schreibe minimalen Unit-Test oder Anpassung eines existierenden Tests, wenn möglich — nur falls das den Fix sichert.

4. **Testen & Verifizieren lokal:**
   - Führe lokale Tests erneut aus.
   - Manuelles Quick-E2E (falls nötig): reproduziere die Schritte und notiere Screenshots/Logs.

5. **Pull Request & Report:**
   - Eröffne PR gegen Zielbranch mit:
     - Kurzbeschreibung (was gefixt wurde).
     - Schritte zur Reproduktion vor/nach.
     - Änderungen in Files + rationale.
     - CI/Tests-Status.
   - Schreibe einen abschließenden Kommentar mit „acceptance checklist“ (siehe unten) und bitte um Review/merge.

Kosten-/Token-Sparmaßnahmen (wichtig):
- Verwende AI-Anfragen **nur** für: 1) Analyse komplexer Stacktraces, 2) Formulierung knapper Patches, 3) Generieren von Tests/Regex/kompakten Code-Snippets.
- **Batch** Fragen: Sammle mehrere kleine Fragen und stelle sie in einer einzigen Anfrage statt vielen einzelnen.
- Nutze kleinere/cheaper Modelle falls möglich (z. B. `gpt-4o-mini` oder `gpt-4o-nano`) und setze `max_tokens` strikt (z. B. `max_tokens: 400`).
- Vermeide „iterative chat“ loops: bevor du eine teure Anforderung startest, liefere eine präzise Zusammenfassung und bitte nur um das konkrete Patch-Snippet.
- Wenn möglich: führe Tests lokal, nicht über die cloud/remote.
- Verwende Diff/patch Format in der Antwort, statt ganzer Dateien neu zu generieren.

Reporting / Ergebnisformat (was du mir zurückgibst):
- Kurzes Status-Update: `Done` / `Partially Done` / `Blocked` + Grund.
- Liste der Commits/PR-Links.
- Reproduktionsschritte (vorher / nachher).
- Offene Punkte (falls noch welche existieren) mit klarer Priorität.
- Kurze Einschätzung zur Token-/Kosten-Nutzung (z. B. „Ich habe 2 AI Calls gemacht: 1×Stacktrace-Analyse, 1×Patch-Review“).

Fehlerbehebungs-Prioritäten (kurz):
1. Crash / App startet nicht → höchste Priorität.
2. Blocking funktionale Fehler (z. B. Auth, Payment) → high.
3. Major UX/Fehler, die User-Flows verhindern → medium.
4. Kleine kosmetische Bugs / Styling → low (nur wenn Zeit/Allowance).

Letzer Stand in der App: 
The website's homepage and upload feature are working great! You can see the correct title and header, navigate easily between "Upload," "Dashboard," and "History," and the upload page shows clear instructions, a place to drop your files, and mentions the accepted file types (JPG, PNG, PDF). The only very minor things noted were a warning in the background logs about a missing developer credential (which doesn't affect how you use the site) and a tiny difference in how the sidebar branding appears, which seems to be intentional.

Time worked
14 minutes
Work done
80 actions
Items read
1773 lines
Code changed
+154
-89
Agent Usage
$4.20
Fix JSON parsing in server/gemini-vertex.ts to handle edge cases like nested markdown blocks, extra whitespace, and malformed AI responses
$0.09
Test all features end-to-end: PDF upload, invoice extraction, VIES validation, dashboard stats, export functionality
$1.31
Rename 'Deutsche Rechnungsextraktion' to 'Rechnungsextraktion' across all frontend files
$0.27
Automated UI testing
$0.06
Reviewing Agent's code
$0.14
Verifying bug fixes
$0.04
General work


Features to Fix: 
- Agent encountered an error while running, we are investigating the issue.
- Json Parsing funktioniert nicht 
- Fixe alle weiteren Bugs in der App -> Teste alle Features
- Nenne Es einfach Rechnungsextraktion nicht Deutsche Rechnungsextraktion


Improve invoice extraction to handle missing VIES data
Update invoice extraction workflow to gracefully handle cases where VIES data is not available, preventing errors and ensuring smoother processing.

